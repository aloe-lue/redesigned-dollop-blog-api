// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profile {
  id             Int       @id @unique @default(autoincrement())
  email          String    @db.VarChar(255)
  firstName      String    @db.VarChar(255)
  lastName       String    @db.VarChar(255)
  middleName     String?   @db.VarChar(255)
  password       String    @db.VarChar(255)
  role           String?   @db.VarChar(255)
  bio            String    @db.VarChar(255)
  profilePicture picture[] @relation("profilePicture")
  user           user      @relation("userProfile", fields: [userId], references: [id])
  userId         Int       @unique
}

model picture {
  id          Int      @id @unique @default(autoincrement())
  url         String   @db.VarChar(255)
  caption     String?  @db.VarChar(255)
  profile     profile? @relation("profilePicture", fields: [profileId], references: [id])
  profileId   Int?
  createdDate DateTime
}

model member {
  id     Int  @id @unique @default(autoincrement())
  user   user @relation("member", fields: [userId], references: [id])
  userId Int  @unique
}

model user {
  id          Int       @id @unique @default(autoincrement())
  createdDate DateTime  @db.Date()
  userComment comment[] @relation("userComment")
  userProfile profile?  @relation("userProfile")
  author      author?   @relation("author")
  authorId    Int       @unique
  member      member?   @relation("member")
}

model author {
  id     Int    @id @unique @default(autoincrement())
  user   user   @relation("author", fields: [userId], references: [id])
  userId Int    @unique
  post   post[] @relation("authorPost")
}

model post {
  id          Int       @id @unique @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String    @db.VarChar(65535)
  dateCreated DateTime  @db.Timestamp()
  dateUpdated DateTime  @db.Timestamp()
  author      author?   @relation("authorPost", fields: [postId], references: [id])
  postId      Int
  comments    comment[] @relation("postComments")
}

model comment {
  id          Int      @id @unique @default(autoincrement())
  title       String?  @db.VarChar(255)
  content     String   @db.VarChar(65535)
  dateCreated DateTime @db.Timestamp()
  dateUpdated DateTime @db.Timestamp()
  userComment user?    @relation("userComment", fields: [userId], references: [id])
  userId      Int?
  post        post?    @relation("postComments", fields: [postId], references: [id])
  postId      Int?
}
