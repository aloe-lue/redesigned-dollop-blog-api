// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model profile {
  id             String    @id @unique @default(cuid())
  firstName      String    @db.VarChar(255)
  lastName       String    @db.VarChar(255)
  middleName     String?   @db.VarChar(255)
  role           String?   @db.VarChar(255)
  bio            String?   @db.VarChar(255)
  profilePicture picture[] @relation("profilePicture")
  user           user      @relation("userProfile", fields: [userId], references: [id])
  userId         String    @unique
}

model picture {
  id          String   @id @unique @default(cuid())
  url         String   @db.VarChar(255)
  caption     String?  @db.VarChar(255)
  profile     profile? @relation("profilePicture", fields: [profileId], references: [id])
  profileId   String?
  createdDate DateTime
}

model member {
  id     String  @id @unique @default(cuid())
  user   user    @relation("member", fields: [userId], references: [id])
  userId String  @unique
  // add more independent features here
  slug   String? @default("member") @db.VarChar(255)
}

model user {
  id          String    @id @unique @default(cuid())
  createdDate DateTime  @db.Date()
  // move the user model here
  email       String    @unique @db.VarChar(255)
  username    String    @unique @db.VarChar(255)
  password    String    @db.VarChar(255)
  // im thinking of moving comments to both member and author
  userComment comment[] @relation("userComment")
  // this has bugging me that i should put post it here instead
  userProfile profile?  @relation("userProfile")
  author      author?   @relation("author")
  member      member?   @relation("member")
}

model author {
  id     String  @id @unique @default(cuid())
  user   user    @relation("author", fields: [userId], references: [id])
  userId String  @unique
  // add independent more features here
  slug   String? @default("author") @db.VarChar(255)
  post   post[]  @relation("authorPost")
}

model post {
  id          String    @id @unique @default(cuid())
  content     String    @db.VarChar(65535)
  dateCreated DateTime  @db.Timestamp()
  dateUpdated DateTime? @db.Timestamp()
  comments    comment[] @relation("postComments")
  author      author?   @relation("authorPost", fields: [authorId], references: [id])
  authorId    String
  isPublished Boolean   @default(false)
}

model comment {
  id          String    @id @unique @default(cuid())
  content     String    @db.VarChar(65535)
  dateCreated DateTime  @db.Timestamp()
  dateUpdated DateTime? @db.Timestamp()
  userComment user?     @relation("userComment", fields: [userId], references: [id])
  userId      String?
  post        post?     @relation("postComments", fields: [postId], references: [id])
  postId      String?
}
